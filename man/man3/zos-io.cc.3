.TH "src/zos-io.cc" 3 "Wed May 17 2023" "zoslib" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/zos-io.cc
.SH SYNOPSIS
.br
.PP
\fC#include 'zos\-base\&.h'\fP
.br
\fC#include <errno\&.h>\fP
.br
\fC#include <poll\&.h>\fP
.br
\fC#include <pthread\&.h>\fP
.br
\fC#include <stdio\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <string\&.h>\fP
.br
\fC#include <sys/socket\&.h>\fP
.br
\fC#include <sys/stat\&.h>\fP
.br
\fC#include <sys/types\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fB_AE_BIMODAL\fP   1"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fB__console\fP (const void *p_in, int len_i)"
.br
.ti -1c
.RI "int \fB__console_printf\fP (const char *fmt,\&.\&.\&.)"
.br
.ti -1c
.RI "int \fBvdprintf\fP (int fd, const char *fmt, va_list ap)"
.br
.ti -1c
.RI "int \fBdprintf\fP (int fd, const char *fmt,\&.\&.\&.)"
.br
.ti -1c
.RI "void \fB__dump_title\fP (int fd, const void *addr, size_t len, size_t bw, const char *format,\&.\&.\&.)"
.br
.ti -1c
.RI "void \fB__dump\fP (int fd, const void *addr, size_t len, size_t bw)"
.br
.ti -1c
.RI "int \fB__find_file_in_path\fP (char *out, int size, const char *envvar, const char *file)"
.br
.ti -1c
.RI "int \fB__chgfdccsid\fP (int fd, unsigned short ccsid)"
.br
.ti -1c
.RI "int \fB__setfdccsid\fP (int fd, int t_ccsid)"
.br
.ti -1c
.RI "int \fB__getfdccsid\fP (int fd)"
.br
.ti -1c
.RI "void \fBupdate_memlogging\fP (__zinit *zinit_ptr, const char *envar, bool memacnt)"
.br
.ti -1c
.RI "void \fBupdate_memlogging_level\fP (__zinit *zinit_ptr, const char *envar)"
.br
.ti -1c
.RI "int \fB__doLogMemoryUsage\fP ()"
.br
.ti -1c
.RI "void \fB__setLogMemoryUsage\fP (bool v)"
.br
.ti -1c
.RI "char * \fB__getMemoryUsageLogFile\fP ()"
.br
.ti -1c
.RI "int \fB__doLogMemoryAll\fP ()"
.br
.ti -1c
.RI "int \fB__doLogMemoryWarning\fP ()"
.br
.ti -1c
.RI "int \fB__getLogMemoryFileNo\fP ()"
.br
.ti -1c
.RI "void \fB__memprintf\fP (const char *format,\&.\&.\&.)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define _AE_BIMODAL   1"

.SH "Function Documentation"
.PP 
.SS "int __chgfdccsid (int fd, unsigned short ccsid)"
Change file descriptor to CCSID\&. 
.PP
\fBParameters\fP
.RS 4
\fIfd\fP file descriptor\&. 
.br
\fIccsid\fP CCSID\&. 
.RE
.PP
\fBReturns\fP
.RS 4
returns 0 if successful, or -1 on failure\&. 
.RE
.PP

.SS "void __console (const void * p_in, int len_i)"
Print given buffer to MVS Console\&. 
.SS "int __console_printf (const char * fmt,  \&.\&.\&.)"
Print formatted data to MVS Console\&. 
.SS "int __doLogMemoryAll ()"
Returns 1 if all messages from memory diagnostics are enabled\&. 
.SS "int __doLogMemoryUsage ()"
Returns 1 if logging of memory diagnostics is enabled\&. 
.SS "int __doLogMemoryWarning ()"
Returns 1 if only warnings from memory diagnostics are enabled\&. Errors are always included if memory diangostics is enabled\&. 
.SS "void __dump (int fd, const void * addr, size_t len, size_t bw)"
Dump to console\&. 
.SS "void __dump_title (int fd, const void * addr, size_t len, size_t bw, const char *,  \&.\&.\&.)"
Dump title to console\&. 
.SS "int __find_file_in_path (char * out, int size, const char * envvar, const char * file)"
Finds file in a given path 
.PP
\fBParameters\fP
.RS 4
\fIout\fP Found path string 
.br
\fIsize\fP Max size of path string 
.br
\fIenvar\fP Environment variable to search 
.br
\fIfile\fP file to search 
.RE
.PP
\fBReturns\fP
.RS 4
returns non-zero if successful, 0 if not found\&. 
.RE
.PP

.SS "int __getfdccsid (int fd)"
Get file descriptor CCSID\&. 
.PP
\fBParameters\fP
.RS 4
\fIfd\fP file descriptor\&. 
.RE
.PP
\fBReturns\fP
.RS 4
returns file descriptors ccsid\&. 
.RE
.PP

.SS "int __getLogMemoryFileNo ()"
Returns the fileno to which memory diagnostics is written (use for instance in a `__display_backtrace(\fB__getLogMemoryFileNo()\fP); call)\&. 
.SS "char* __getMemoryUsageLogFile ()"
Returns the file name, including 'stdout' or 'stderr', used to log memory diagnostics to\&. 
.SS "void __memprintf (const char * format,  \&.\&.\&.)"
Logs memory diagnostics to the file name specified in the environment variable zoslib_config_t\&.MEMORY_USAGE_LOG_FILE_ENVAR\&.
.PP
\fBParameters\fP
.RS 4
\fIsame\fP as C's printf() parameters 
.RE
.PP

.SS "int __setfdccsid (int fd, int t_ccsid)"
Set file descriptor to the provided CCSID\&. 
.PP
\fBParameters\fP
.RS 4
\fIfd\fP file descriptor\&. 
.br
\fIt_ccsid\fP CCSID\&. 
.RE
.PP
\fBReturns\fP
.RS 4
returns 0 if successful, or -1 on failure\&. 
.RE
.PP

.SS "void __setLogMemoryUsage (bool v)"

.SS "int dprintf (int fd, const char *,  \&.\&.\&.)"
Debug Printf\&. 
.PP
\fBReturns\fP
.RS 4
returns total number of bytes written to file descriptor 
.RE
.PP

.SS "void update_memlogging (__zinit * zinit_ptr, const char * envar, bool memacnt)"

.SS "void update_memlogging_level (__zinit * zinit_ptr, const char * envar)"

.SS "int vdprintf (int fd, const char *, va_list ap)"
Variadic Debug Printf\&. 
.PP
\fBReturns\fP
.RS 4
returns total number of bytes written to file descriptor 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for zoslib from the source code\&.
